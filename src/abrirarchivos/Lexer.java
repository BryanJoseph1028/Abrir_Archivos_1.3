/* The following code was generated by JFlex 1.4.3 on 11/23/18 3:54 a.m. */

package abrirarchivos;
import static abrirarchivos.Token.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/23/18 3:54 a.m. from the specification file
 * <tt>C:/Users/USER/Documents/NetBeansProjects/analizadorLexico-Java/src/analizador/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\2\0\1\3\22\0\1\3\1\11\1\0\1\12"+
    "\3\0\1\43\1\40\1\41\1\6\1\5\1\0\1\7\1\31\1\10"+
    "\12\2\1\0\1\44\1\22\1\4\1\33\2\0\1\35\7\1\1\36"+
    "\3\1\1\34\1\37\14\1\4\0\1\1\1\0\1\27\1\1\1\15"+
    "\1\20\1\21\1\1\1\45\1\32\1\13\2\1\1\16\1\30\1\14"+
    "\1\23\2\1\1\26\1\24\1\25\1\17\5\1\1\42\1\0\1\42"+
    "\43\0\1\11\uff5e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\3\2\2\1\1\2\2\14"+
    "\1\15\1\16\1\17\4\2\2\0\1\20\1\2\1\0"+
    "\2\2\1\21\2\2\2\0\1\2\1\0\2\2\1\22"+
    "\1\23\2\0\1\24\1\3\2\2\2\0\1\25\1\2"+
    "\2\0\1\26\5\0\1\27\2\0\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\46\0\46\0\46\0\46"+
    "\0\46\0\46\0\46\0\46\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\46\0\46\0\46\0\46\0\u01a2"+
    "\0\u01c8\0\u01ee\0\u0214\0\u023a\0\u0260\0\46\0\u0286\0\u02ac"+
    "\0\u02d2\0\u02f8\0\114\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6"+
    "\0\u03dc\0\u0402\0\u0428\0\114\0\114\0\u044e\0\u0474\0\114"+
    "\0\46\0\u049a\0\u04c0\0\u04e6\0\u050c\0\114\0\u0532\0\u0558"+
    "\0\u057e\0\114\0\u05a4\0\u05ca\0\u05f0\0\u0616\0\u063c\0\46"+
    "\0\u0662\0\u0688\0\46";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\3\1\16\3\3\1\17"+
    "\1\20\6\3\1\2\1\3\1\21\1\22\3\3\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\47\0\2\3\10\0"+
    "\7\3\1\0\6\3\1\0\1\3\1\0\4\3\5\0"+
    "\1\3\2\0\1\4\44\0\2\3\10\0\1\3\1\31"+
    "\5\3\1\0\6\3\1\0\1\3\1\0\4\3\5\0"+
    "\1\3\1\0\2\3\10\0\7\3\1\0\1\32\5\3"+
    "\1\0\1\3\1\0\4\3\5\0\1\3\1\0\2\3"+
    "\10\0\1\3\1\33\5\3\1\0\6\3\1\0\1\3"+
    "\1\0\4\3\5\0\1\3\13\0\1\34\1\0\1\35"+
    "\4\0\1\36\56\0\1\36\13\0\2\3\10\0\7\3"+
    "\1\0\6\3\1\0\1\3\1\0\1\3\1\37\2\3"+
    "\5\0\1\3\7\0\1\40\37\0\2\3\10\0\6\3"+
    "\1\41\1\0\6\3\1\0\1\3\1\0\4\3\5\0"+
    "\1\3\1\0\2\3\10\0\2\3\1\42\4\3\1\0"+
    "\2\3\1\43\3\3\1\0\1\3\1\0\4\3\5\0"+
    "\1\3\1\0\2\3\10\0\4\3\1\44\2\3\1\0"+
    "\6\3\1\0\1\3\1\0\4\3\5\0\1\3\1\0"+
    "\2\3\10\0\5\3\1\45\1\3\1\0\6\3\1\0"+
    "\1\3\1\0\4\3\5\0\1\3\23\0\1\46\45\0"+
    "\1\47\23\0\2\3\10\0\7\3\1\0\6\3\1\0"+
    "\1\3\1\0\2\3\1\50\1\3\5\0\1\3\2\0"+
    "\1\51\44\0\2\3\10\0\7\3\1\0\2\3\1\52"+
    "\3\3\1\0\1\3\1\0\4\3\5\0\1\3\1\0"+
    "\2\3\10\0\3\3\1\53\3\3\1\0\6\3\1\0"+
    "\1\3\1\0\4\3\5\0\1\3\1\0\2\3\10\0"+
    "\7\3\1\0\2\3\1\54\3\3\1\0\1\3\1\0"+
    "\4\3\5\0\1\3\1\0\2\3\10\0\3\3\1\55"+
    "\3\3\1\0\6\3\1\0\1\3\1\0\4\3\5\0"+
    "\1\3\24\0\1\56\35\0\1\57\32\0\2\3\10\0"+
    "\7\3\1\0\6\3\1\0\1\3\1\0\3\3\1\60"+
    "\5\0\1\3\2\0\1\51\36\0\1\61\5\0\2\3"+
    "\10\0\2\3\1\62\4\3\1\0\6\3\1\0\1\3"+
    "\1\0\4\3\5\0\1\3\1\0\2\3\10\0\4\3"+
    "\1\63\2\3\1\0\6\3\1\0\1\3\1\0\4\3"+
    "\5\0\1\3\25\0\1\64\33\0\1\65\33\0\2\3"+
    "\10\0\7\3\1\0\6\3\1\0\1\66\1\0\4\3"+
    "\5\0\1\3\1\0\2\3\10\0\5\3\1\67\1\3"+
    "\1\0\6\3\1\0\1\3\1\0\4\3\5\0\1\3"+
    "\26\0\1\70\42\0\1\71\23\0\2\3\10\0\6\3"+
    "\1\72\1\0\6\3\1\0\1\3\1\0\4\3\5\0"+
    "\1\3\21\0\1\73\55\0\1\74\43\0\1\75\50\0"+
    "\1\76\43\0\1\77\50\0\1\100\43\0\1\101\46\0"+
    "\1\102\46\0\1\103\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1710];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\10\11\7\1\4\11\4\1\2\0"+
    "\1\11\1\1\1\0\5\1\2\0\1\1\1\0\4\1"+
    "\2\0\1\1\1\11\2\1\2\0\2\1\2\0\1\1"+
    "\5\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[67];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       
    int j = offset;  
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  private java.io.Reader zzReader;
  private int zzState;
  private int zzLexicalState = YYINITIAL;
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];
  private int zzMarkedPos;
  private int zzCurrentPos;
  private int zzStartRead;

  private int zzEndRead;
  private int yyline;
  private int yychar;
  private int yycolumn;
  private boolean zzAtBOL = true;
  private boolean zzAtEOF;
  private boolean zzEOFDone;  
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 126) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

  
    if (zzCurrentPos >= zzBuffer.length) {
  
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
   
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    return true;
  }

  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  public final int yystate() {
    return zzLexicalState;
  }


  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }

  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }

  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 

  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }

  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      zzMarkedPos = zzMarkedPosL;
      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { lexeme=yytext(); return ENDL;
          }
        case 25: break;
        case 18: 
          { lexeme=yytext(); return $;
          }
        case 26: break;
        case 23: 
          { lexeme=yytext(); return STRREV;
          }
        case 27: break;
        case 12: 
          { lexeme=yytext(); return PARENTESIS;
          }
        case 28: break;
        case 22: 
          { lexeme=yytext(); return PUNTO;
          }
        case 29: break;
        case 5: 
          { lexeme=yytext();return ASSIGN;
          }
        case 30: break;
        case 13: 
          { lexeme=yytext(); return LLAVE;
          }
        case 31: break;
        case 15: 
          { lexeme=yytext(); return PUNTO_COMA;
          }
        case 32: break;
        case 11: 
          { lexeme=yytext(); return NUMERAL;
          }
        case 33: break;
        case 24: 
          { lexeme=yytext(); return ABS;
          }
        case 34: break;
        case 20: 
          { lexeme=yytext(); return ARRAY;
          }
        case 35: break;
        case 10: 
          { lexeme=yytext(); return EXCLAMACION;
          }
        case 36: break;
        case 16: 
          { lexeme=yytext(); return OPERACIONALES;
          }
        case 37: break;
        case 21: 
          { lexeme=yytext(); return GET;
          }
        case 38: break;
        case 2: 
          { lexeme=yytext(); return CADENA;
          }
        case 39: break;
        case 17: 
          { lexeme=yytext(); return POST;
          }
        case 40: break;
        case 6: 
          { lexeme=yytext();return SUMA;
          }
        case 41: break;
        case 1: 
          { return ERROR;
          }
        case 42: break;
        case 8: 
          { lexeme=yytext();return RESTA;
          }
        case 43: break;
        case 4: 
          { /*Ignore*/
          }
        case 44: break;
        case 9: 
          { lexeme=yytext();return MENOSMAS;
          }
        case 45: break;
        case 7: 
          { lexeme=yytext();return MULT;
          }
        case 46: break;
        case 3: 
          { lexeme=yytext(); return NUM;
          }
        case 47: break;
        case 14: 
          { lexeme=yytext(); return COMILLAS;
          }
        case 48: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
